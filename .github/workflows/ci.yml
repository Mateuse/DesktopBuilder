name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  backend-tests:
    name: Backend Tests (Go)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'
        cache-dependency-path: backend/go.sum

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-v2-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-v2-

    - name: Install dependencies
      working-directory: ./backend
      run: go mod download

    - name: Run linter
      working-directory: ./backend
      run: |
        go vet ./...
        out=$(gofmt -l .); if [ -n "$out" ]; then echo "Files need gofmt:"; echo "$out"; exit 1; fi

    - name: Run unit tests
      working-directory: ./backend
      run: make test-unit

    - name: Run integration tests
      working-directory: ./backend
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: make test-integration

    - name: Run tests with coverage
      working-directory: ./backend
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: make test-coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests (Node.js/TypeScript)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linter
      working-directory: ./frontend
      run: npm run lint

    - name: Run type checking
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Run tests
      working-directory: ./frontend
      run: npm run test:run

    - name: Run tests with coverage
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'
        cache-dependency-path: backend/go.sum

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: go mod download

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build backend
      working-directory: ./backend
      run: go build -o bin/api ./cmd/api

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Test backend binary
      working-directory: ./backend
      run: |
        if [ -f bin/api ]; then
          echo "Backend binary built successfully"
          file bin/api
        else
          echo "Backend binary not found"
          exit 1
        fi

    - name: Test frontend build
      working-directory: ./frontend
      run: |
        if [ -d dist ]; then
          echo "Frontend built successfully"
          ls -la dist/
        else
          echo "Frontend dist directory not found"
          exit 1
        fi
